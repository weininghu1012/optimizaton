function [f,J] = funv (x)
%
% function [f,J] = funv (x)
%
%
% defines a vector function f in several variables x
% optionally together with its Jacobian J.
%

number = 3;

if number == 1

  J = [.16,-1.2,2.4,-1.4; -1.2, 12, -27, 16.8; ...
	2.4, -27, 64.8, -42; -1.4, 16.8, -42, 28];
  f = [5.04; -59.4; 146.4; -96.6];
  f = f + J*x;

elseif number == 2

  f1 = -(1.5 - x(1)*(1-x(2)))*(1-x(2)) - ...
       (2.25 - x(1)*(1-x(2)^2))*(1-x(2)^2) - ...
       (2.625 - x(1)*(1-x(2)^3))*(1-x(2)^3); 
  f2 = (1.5 - x(1)*(1-x(2)))*x(1) + ...
       (2.25 - x(1)*(1-x(2)^2))*2*x(1)*x(2) + ...
       (2.625 - x(1)*(1-x(2)^3))*3*x(1)*x(2)^2;
  f = [f1;f2];

  J(1,1) = (1-x(2))^2 + (1-x(2)^2)^2 + (1-x(2)^3)^2;
  J(1,2) = 1.5-2*x(1)*(1-x(2)) + 2*x(2)* (2.25 - 2*x(1)*(1-x(2)^2)) ...
	       +3*x(2)^2* (2.625 - 2*x(1)*(1-x(2)^3));
  J(2,1) = J(1,2);
  J(2,2) = x(1)^2 + 2*x(1)*(2.25-x(1)*(1-x(2)^2)) + (2*x(1)*x(2))^2 ...
         + 6*x(1)*x(2)*(2.625-x(1)*(1-x(2)^3)) + (3*x(1)*x(2)^2)^2;

elseif number == 3

  f = [4*x(1)^3 + x(2); x(1) + 2*(1+x(2))];
  J = [12*x(1)^2, 1; 1, 2];

elseif number == 4

  f = [x(1)^2 - 2*x(1) - x(2) + 1; ...
	x(1)^2 + x(2)^2 - 1];
  J = [2*x(1) - 2, -1;  2*x(1), 2*x(2)];

end



